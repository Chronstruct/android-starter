apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
// Needed for Dagger and DataBinding, specifically, the BR generation
apply plugin: 'kotlin-kapt'

// ------- APK signing --------- //
// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// ------- PUBLISH from gradle ------ //
play {
    track = 'internal'
}

android {
    // ------- APK signing --------- //
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    // ------- PUBLISH from gradle ------ //
    playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = '<YOUR_SERVICE_ACCOUNT_EMAIL>'
            pk12File = rootProject.file('key.p12')
        }
    }
    compileSdkVersion 'android-P'
    defaultConfig {
        applicationId "com.chronstruct.starter"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1      // Increment before a PUBLISH
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
        playAccountConfig = playAccountConfigs.defaultAccountConfig
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions "mode"
    // configure different classes and resources for different app versions
    // usually dev, staging, prod, and api-variants
    productFlavors {
        dev {
            dimension "mode"
        }
        // Flavor with pre-populated data (for dev and demoing)
        seeded {
            applicationIdSuffix ".seeded"
            dimension "mode"
            signingConfig signingConfigs.release
            matchingFallbacks = ['dev']
        }
        prod {
            dimension "mode"
            signingConfig signingConfigs.release
        }
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    def lifecycle_version = "2.0.0-alpha1"
    def nav_version = "1.0.0-alpha02"
    def daggerVer = '2.16'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.0-alpha1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.0'
    implementation 'androidx.core:core-ktx:1.0.0-alpha1'

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"

    // Navigation
    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$nav_version"
    androidTestImplementation "android.arch.navigation:navigation-testing-ktx:$nav_version"

    //Chronstruct-specific
    implementation('com.github.Chronstruct:utils-android:v0.0.2') {
        exclude group: 'com.android.support'
    }
    // For when testing locally:
    // Uncomment project in settings.gradle.
    // Use the Build Variants window to select the variant.
//    implementation project(':utils')

    // Dagger2
    implementation "com.google.dagger:dagger:$daggerVer"
    implementation "com.google.dagger:dagger-android:$daggerVer"
    implementation "com.google.dagger:dagger-android-support:$daggerVer"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0-alpha1'
    // Dagger2 helper for ViewModels https://github.com/alexfacciorusso/DaggerViewModel
//    implementation 'com.alexfacciorusso:daggerviewmodel:0.1.2'
    kapt "com.google.dagger:dagger-android-processor:$daggerVer"
    kapt "com.google.dagger:dagger-compiler:$daggerVer"

    // Timber
    implementation 'com.jakewharton.timber:timber:4.7.0'

    // LeakCanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    // Testing-only dependencies
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation "com.nhaarman:mockito-kotlin:1.5.0"
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha1'
    androidTestImplementation 'androidx.test:rules:1.1.0-alpha1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha1'
}
